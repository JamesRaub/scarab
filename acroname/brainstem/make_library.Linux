DATADIR := unix_$(LIBNAME)_Data/

COBJECTS = $(SOURCES:.c=.o)
CPPOBJECTS = $(CPPSOURCES:.cpp=.op)

COBJECTS += aOSDefs.o

CDEPENDS := $(SOURCES:.c=.d)
CPPDEPENDS := $(CPPSOURCES:.cpp=.dp)

DBGCFLAGS := -include aUnix/unix_$(LIBNAME)_pfxd.h -g -fPIC
DBGOBJDIR := $(DATADIR)$(ARCH)/aDebug/
DBGCDEPENDS := $(addprefix $(DBGOBJDIR), $(CDEPENDS))
DBGCPPDEPENDS := $(addprefix $(DBGOBJDIR), $(CPPDEPENDS))
DBGCOBJECTS := $(addprefix $(DBGOBJDIR), $(COBJECTS))
DBGCPPOBJECTS := $(addprefix $(DBGOBJDIR), $(CPPOBJECTS))
DBGOUTDIR := $(ROOT)aDebug/aUnix/$(ARCH)/

RELCFLAGS := -include aUnix/unix_$(LIBNAME)_pfx.h -O3 -fPIC
RELOBJDIR := $(DATADIR)$(ARCH)/aRelease/
RELCDEPENDS := $(addprefix $(RELOBJDIR), $(CDEPENDS))
RELCPPDEPENDS := $(addprefix $(RELOBJDIR), $(CPPDEPENDS))
RELCOBJECTS := $(addprefix $(RELOBJDIR), $(COBJECTS))
RELCPPOBJECTS := $(addprefix $(RELOBJDIR), $(CPPOBJECTS))
RELOUTDIR := $(ROOT)aRelease/aUnix/$(ARCH)/

.PHONY : all
all : debug release

# build the actual library object
debug : $(DBGOBJDIR) $(DBGCDEPENDS) $(DBGCPPDEPENDS) \
		     $(DBGCOBJECTS) $(DBGCPPOBJECTS)
	@echo linking debug $(LIBNAME)
	@$(CC) -gfull -shared -Wall -Werror \
	      -fvisibility=hidden \
	      -o $(DBGOUTDIR)lib$(LIBNAME).so $(DBGCOBJECTS) \
	      $(DBGCPPOBJECTS) -lc -Wl,-rpath ./

# build the actual library object
release : $(RELOBJDIR) $(RELCDEPENDS) $(RELCPPDEPENDS) \
		       $(RELCOBJECTS) $(RELCPPOBJECTS)
	@echo linking release $(LIBNAME)
	@$(CC) -shared -Wall -Werror \
	      -fvisibility=hidden \
	      -o $(RELOUTDIR)lib$(LIBNAME).so $(RELCOBJECTS) \
	      $(RELCPPOBJECTS) -lc -Wl,-rpath ./

# directories
$(DBGOBJDIR) :
	@echo building directory $@
	@[ -d $(DBGOBJDIR) ] || mkdir -p $(DBGOBJDIR)
$(RELOBJDIR) : 
	@echo building directory $@
	@[ -d $(RELOBJDIR) ] || mkdir -p $(RELOBJDIR)


# dependencies
$(DBGOBJDIR)%.d: %.c $(DBGOBJDIR)
	@echo -n "$@ $(DBGOBJDIR)" > $@;
	@set -e; $(CC) -MM $(DBGCFLAGS) $(CFLAGS) $(INCLUDES) $< >> $@; \
	    [ -s $@ ] || rm -f $@
$(DBGOBJDIR)%.dp: %.cpp $(DBGOBJDIR)
	@echo -n "$@ $(DBGOBJDIR)" > $@;
	@set -e; $(CC) -MM $(DBGCFLAGS) $(CFLAGS) $(INCLUDES) $< >> $@; \
	    [ -s $@ ] || rm -f $@

$(RELOBJDIR)%.d: %.c $(RELOBJDIR)
	@echo -n "$@ $(RELOBJDIR)" > $@;
	@set -e; $(CC) -MM $(RELCFLAGS) $(CFLAGS) $(INCLUDES) $< >> $@; \
	    [ -s $@ ] || rm -f $@
$(RELOBJDIR)%.dp: %.cpp $(RELOBJDIR)
	@echo -n "$@ $(RELOBJDIR)" > $@;
	@set -e; $(CC) -MM $(RELCFLAGS) $(CFLAGS) $(INCLUDES) $< >> $@; \
	    [ -s $@ ] || rm -f $@

#include $(DBGCDEPENDS)
#include $(RELDEPENDS)

# object generation
$(DBGOBJDIR)%.o : %.c $(DBGOBJDIR)%.d
	@echo compiling debug $<
	$(CC) -c $(DBGCFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<
$(DBGOBJDIR)%.op : %.cpp $(DBGOBJDIR)%.dp
	@echo compiling debug $<
	$(CC) -c $(DBGCFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<

$(RELOBJDIR)%.o : %.c $(RELOBJDIR)%.d
	@echo compiling release $<
	$(CC) -c $(RELCFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<
$(RELOBJDIR)%.op : %.cpp $(RELOBJDIR)%.dp
	@echo compiling release $<
	$(CC) -c $(RELCFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<

# cleanup
.PHONY: clean
clean :
	rm -rf .AppleFileInfo
	rm -f .DS_Store
	rm -rf $(DATADIR)
	rm -f $(DBGOUTDIR)lib$(LIBNAME).so
	rm -f $(DBGOUTDIR)lib$(LIBNAME).so.0
	rm -f $(DBGOUTDIR)lib$(LIBNAME).so.0.0
	rm -f $(RELOUTDIR)lib$(LIBNAME).so
	rm -f $(RELOUTDIR)lib$(LIBNAME).so.0
	rm -f $(RELOUTDIR)lib$(LIBNAME).so.0.0
