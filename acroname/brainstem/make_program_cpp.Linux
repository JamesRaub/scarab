DATADIR := unix_$(PROGNAME)_Data/

COBJECTS = $(SOURCES:.c=.o)
CPPOBJECTS = $(CPPSOURCES:.cpp=.op)

COBJECTS += aOSDefs.o

CDEPENDS := $(SOURCES:.c=.d)
CPPDEPENDS := $(CPPSOURCES:.cpp=.dp)

DBGCFLAGS := -include aUnix/unix_$(PROGNAME)_pfxd.h -Wall \
	     -g
DBGOBJDIR := $(DATADIR)$(ARCH)/aDebug/
DBGCDEPENDS := $(addprefix $(DBGOBJDIR), $(CDEPENDS))
DBGCPPDEPENDS := $(addprefix $(DBGOBJDIR), $(CPPDEPENDS))
DBGCOBJECTS := $(addprefix $(DBGOBJDIR), $(COBJECTS))
DBGCPPOBJECTS := $(addprefix $(DBGOBJDIR), $(CPPOBJECTS))
DBGOUTDIR := $(ROOT)aDebug/aUnix/$(ARCH)/

RELCFLAGS := -include aUnix/unix_$(PROGNAME)_pfx.h -Wall \
	     -O3
RELOBJDIR := $(DATADIR)$(ARCH)/aRelease/
RELCDEPENDS := $(addprefix $(RELOBJDIR), $(CDEPENDS))
RELCPPDEPENDS := $(addprefix $(RELOBJDIR), $(CPPDEPENDS))
RELCOBJECTS := $(addprefix $(RELOBJDIR), $(COBJECTS))
RELCPPOBJECTS := $(addprefix $(RELOBJDIR), $(CPPOBJECTS))
RELOUTDIR := $(ROOT)aRelease/aUnix/$(ARCH)/

.PHONY : all
all : debug release

debug : $(DBGOBJDIR) $(DBGCDEPENDS) $(DBGCPPDEPENDS) \
	             $(DBGCOBJECTS) $(DBGCPPOBJECTS)
	@echo linking debug $(PROGNAME)
	$(CCP) -gfull -Wall -Werror -Wl,-rpath ./ \
	      -L$(DBGOUTDIR) $(LIBRARIES) \
	      -o $(DBGOUTDIR)$(PROGNAME) $(DBGCOBJECTS) \
					 $(DBGCPPOBJECTS)

release : $(RELOBJDIR) $(RELCDEPENDS) $(RELCPPDEPENDS) \
		       $(RELCOBJECTS) $(RELCPPOBJECTS)
	@echo linking release $(PROGNAME)
	$(CCP) -Wall -Werror -Wl,-rpath ./ \
	      -L$(RELOUTDIR) $(LIBRARIES) \
	      -o $(RELOUTDIR)$(PROGNAME) $(RELCOBJECTS) \
				         $(RELCPPOBJECTS)

# directories
$(DBGOBJDIR) :
	@echo building directory $@
	@[ -d $(DBGOBJDIR) ] || mkdir -p $(DBGOBJDIR)
$(RELOBJDIR) :
	@echo building directory $@
	@[ -d $(RELOBJDIR) ] || mkdir -p $(RELOBJDIR)

# dependencies
$(DBGOBJDIR)%.d: %.c $(DBGOBJDIR)
#	@echo -n "$@ $(DBGOBJDIR)" > $@;
	@set -e; $(CC) -MM $(DBGCFLAGS) $(INCLUDES) $< >> $@; [ -s $@ ] \
		|| rm -f $@
$(DBGOBJDIR)%.dp: %.cpp $(DBGOBJDIR)
#	@echo -n "$@ $(DBGOBJDIR)" > $@;
	@set -e; $(CCP) -MM $(DBGCFLAGS) $(INCLUDES) $< >> $@; [ -s $@ ] \
		|| rm -f $@

$(RELOBJDIR)%.d: %.c $(RELOBJDIR)
#	@echo -n "$@ $(RELOBJDIR)" > $@;
	@set -e; $(CC) -MM $(RELCFLAGS) $(INCLUDES) $< >> $@; [ -s $@ ] \
		|| rm -f $@
$(RELOBJDIR)%.dp: %.cpp $(RELOBJDIR)
#	@echo -n "$@ $(RELOBJDIR)" > $@;
	@set -e; $(CCP) -MM $(RELCFLAGS) $(INCLUDES) $< >> $@; [ -s $@ ] \
		|| rm -f $@

-include $(DBGCDEPENDS)
-include $(DBGCPPDEPENDS)
-include $(RELCDEPENDS)
-include $(RELCPPDEPENDS)

# object generation
$(DBGOBJDIR)%.o : %.c $(DBGOBJDIR)%.d
	@echo compiling debug $<
	$(CC) -c $(DBGCFLAGS) $(INCLUDES) -o $@ $<
$(DBGOBJDIR)%.op : %.cpp $(DBGOBJDIR)%.dp
	@echo compiling debug $<
	$(CCP) -c $(DBGCFLAGS) $(INCLUDES) -o $@ $<

$(RELOBJDIR)%.o : %.c $(RELOBJDIR)%.d
	@echo compiling release $<
	$(CC) -c $(RELCFLAGS) $(INCLUDES) -o $@ $<
$(RELOBJDIR)%.op : %.cpp $(RELOBJDIR)%.dp
	@echo compiling release $<
	$(CCP) -c $(RELCFLAGS) $(INCLUDES) -o $@ $<

# cleanup
.PHONY: clean
clean :
	rm -rf .AppleFileInfo
	rm -f .DS_Store
	rm -rf $(DATADIR)
	rm -f $(DBGOUTDIR)$(PROGNAME)
	rm -f $(RELOUTDIR)$(PROGNAME)
